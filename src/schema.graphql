type Error {
  status_code: Int!
  message: String!
}
type User {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  tax_id: String!
  password: String
  accounts: [Account]
  createdAt: String
}
union UserResult = User | Error

type PublicUser {
  id: ID!
  firstname: String!
  lastname: String
  email: String!
  tax_id: String!
  createdAt: String!
  token: String
}

type Query {
  getUser: UserResult!
  getAccountDetails(account_number: Int!): Account!
  getAllAccountBasedOnUserID(user_id: ID!): [Account!]
  getAllTransaction(account_id: Int!, status: TransactionStatus): [Transaction]
}

type Mutation {
  login(userInput: LoginInput): PublicUser!
  register(registerInput: RegisterInput): PublicUser!
  deleteUser: Boolean!
  createAnotherAccount: Account!
  deleteAccount(account_number: Int!): Boolean!
  createTransaction(transaction_details: sendMoneyInput!): Transaction!
  updateTransaction(
    transaction_id: ID!
    status: TransactionStatus!
  ): Transaction!
  deleteTransaction(id: ID!): Transaction!
}

input RegisterInput {
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  tax_id: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Account {
  id: ID!
  account_number: Int!
  userId: ID!
  balance: Float!
  createdAt: String!
}

type PublicAccount {
  id: ID!
  account_number: Int!
  userId: ID!
  User: PublicUser!
  createdAt: String!
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  DELETED
}

enum TransactionType {
  REQUEST
  NORMAL
}

type Transaction {
  id: ID!
  senderId: Int!
  receiverId: Int!
  sender: PublicAccount!
  receiver: PublicAccount!
  amount: Float!
  description: String
  status: TransactionStatus!
  type: TransactionType!
  createdAt: String
  updatedAt: String
}

input sendMoneyInput {
  sender: Int!
  receiver: Int!
  amount: Int!
  type: TransactionType!
  description: String
}

type msg {
  data: String
}
type Subscription {
  greetings(msg: String): msg
}
